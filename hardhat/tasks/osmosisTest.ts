import { task } from 'hardhat/config';
import { cosmos } from '../constant';

task('osmosisTest', 'Send GMP tx to osmosis')
  .addPositionalParam('amount', 'Amount')
  .setAction(async (taskArgs, hre) => {
    const { ethers } = hre;
    const [deployer] = await ethers.getSigners();
    const { amount } = taskArgs;
    const _amount = ethers.utils.parseUnits(amount, 6);
    // const osmosisTestAddress = '0x4f3ED4F09c89eD4F1183664e7e50db9a4F78EeA7';
    const osmosisTestAddress = '0xd9e7436ADC2CBE05cD62c614b095d47D883c0c8c';

    const osmosisTest = await ethers.getContractAt(
      'OsmosisTest',
      osmosisTestAddress,
      deployer
    );

    const destinationChain = cosmos.name;
    const destAddress =
      'osmo1956rjtkm4rh3ncsh5cx0u8552sx80z9ppwmnmucccz3mhs0pglus4rgm8u';
    const payload =
      '0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000000a6d756c74695f73656e640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000a726563697069656e747300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000008737472696e675b5d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002b6f736d6f3133396138706c756d35306e6879717675343270617064663678613973336e6671646e356c7833000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002b6f736d6f316b757832303865783630346a68346c366a7334736170346e75796771773665616b7a75397965000000000000000000000000000000000000000000';
    const symbol = 'aUSDC';
    const usdaAddress = '0x57F1c63497AEe0bE305B8852b354CEc793da43bB';

    const erc20 = new ethers.Contract(
      usdaAddress,
      [
        'function approve(address spender, uint256 amount)',
        'function allowance(address owner, address spender) view returns (uint256)',
      ],
      deployer
    );

    if (
      (await erc20.allowance(deployer.address, osmosisTest.address)).lt(_amount)
    ) {
      await erc20
        .approve(osmosisTest.address, ethers.constants.MaxUint256)
        .then((tx: any) => tx.wait());
      console.log('Approved');
    } else {
      console.log('Already approved');
    }

    const tx = await osmosisTest.multiSend(
      destinationChain,
      destAddress,
      payload,
      symbol,
      _amount,
      {
        value: ethers.utils.parseEther('0.05'),
      }
    );

    console.log('Sent', tx.hash);
  });
